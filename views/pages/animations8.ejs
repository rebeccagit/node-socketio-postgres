<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Saturn orbiting the Sun, Three.js and WebGL</title>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		
		<style>
			body {
				margin: 0px;
				overflow: hidden;
				background-image:url("images/anim8bg.jpg");
				background-repeat:repeat;
			}
			
		</style>
	</head>
	<body>  
	
		<script src="myscripts/threejs/three.js"></script>
		<script src="myscripts/shaders/ConvolutionShader.js"></script>
		<script src="myscripts/shaders/CopyShader.js"></script>
		<script src="myscripts/shaders/FilmShader.js"></script>
		<script src="myscripts/postprocessing/EffectComposer.js"></script>
		<script src="myscripts/postprocessing/ShaderPass.js"></script>
		<script src="myscripts/postprocessing/MaskPass.js"></script>
		<script src="myscripts/postprocessing/RenderPass.js"></script>
		<script src="myscripts/postprocessing/BloomPass.js"></script>
		<script src="myscripts/postprocessing/FilmPass.js"></script>
		<script src="myscripts/threejs/Detector.js"></script>
		
		<script id="fragmentShader" type="x-shader/x-fragment">

			uniform float time;
			uniform vec2 resolution;
			uniform float fogDensity;
			uniform vec3 fogColor;
			uniform sampler2D texture1;
			uniform sampler2D texture2;
			varying vec2 vUv;

			void main( void ) {

				vec2 position = -1.0 + 2.0 * vUv;

				vec4 noise = texture2D( texture1, vUv );
				vec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;
				vec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;

				T1.x += noise.x * 2.0;
				T1.y += noise.y * 2.0;
				T2.x -= noise.y * 0.2;
				T2.y += noise.z * 0.2;

				float p = texture2D( texture1, T1 * 2.0 ).a;

				vec4 color = texture2D( texture2, T2 * 2.0 );
				vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );

				if( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }
				if( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }
				if( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }

				gl_FragColor = temp;

				float depth = gl_FragCoord.z / gl_FragCoord.w;
				const float LOG2 = 1.442695;
				float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );
				fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );

				gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );

			}

		</script>

		<script id="vertexShader" type="x-shader/x-vertex">

			uniform vec2 uvScale;
			varying vec2 vUv;

			void main()
			{

				vUv = uvScale * uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;

			}

		</script>


		
		<script>
			    //work in progress ... redoing the coding
				
				//Does the browser accept webgl?  If not, they are using an ancient browser
				if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
				
				//Set the scene, camera and lighting
				var scene = new THREE.Scene();
				var camera = new THREE.PerspectiveCamera( 50, window.innerWidth/window.innerHeight, 1, 7000 );
				camera.position.y = 400;
			
				scene.add( new THREE.AmbientLight( 0xffffff ) );
				
				
				//light from the sun to give a realistic look that creates a shadow on the side facing away from the sun
				var directionalLight = new THREE.DirectionalLight( 0xffffb3, 0.5 );
				directionalLight.position.set( 1, 0, 0 );
				scene.add( directionalLight );

				
				//To see my starry background: set alpha to true and use setClearColor so that you can see the background image set with CSS.
				var renderer = new THREE.WebGLRenderer({ alpha: true });
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.setClearColor( 0x000000, 0 );
				document.body.appendChild( renderer.domElement );
				
				
				/*
				THE SUN
				var map = new THREE.TextureLoader().load( 'images/sunsurface.jpg' );
				map.wrapS = map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 16;
				var material = new THREE.MeshLambertMaterial( { map: map, side: THREE.DoubleSide } );

				sun = new THREE.Mesh( new THREE.SphereGeometry( 200, 500, 100 ), material );
				sun.position.set( 0, 0, 0 );
				scene.add( sun );
				*/
			
				material = new THREE.ShaderMaterial( {
					uniforms: uniforms,
					vertexShader: document.getElementById( 'vertexShader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShader' ).textContent
				} );

				sun = new THREE.Mesh( new THREE.SphereGeometry( 1, 50, 50 ), material );
				sun.position.set( 0, 0, 0 );
				scene.add( sun );			
			
				//SATURN
				var map2 = new THREE.TextureLoader().load( 'images/saturnsurface.jpg' );
				map2.wrapS = map.wrapT = THREE.RepeatWrapping;
				map2.anisotropy = 16;
				var material2 = new THREE.MeshLambertMaterial( { map: map2, side: THREE.DoubleSide } );

				saturn = new THREE.Mesh( new THREE.SphereGeometry( 50, 300, 150 ), material2 );
				saturn.position.set( -900, 0, 0 );
				scene.add( saturn );
			
				saturnring = new THREE.Mesh( new THREE.RingGeometry( 135, 150, 30, -5, 5, Math.PI * 2 ), material2 );
				saturnring.position.set( -900, 0, 0 );
				saturnring.rotateX( Math.PI / 2 );
				scene.add( saturnring );
				
				saturnring2 = new THREE.Mesh( new THREE.RingGeometry( 100, 130, 30, -5, 5, Math.PI * 2 ), material2 );
				saturnring2.position.set( -900, 0, 0 );
				saturnring2.rotateX( Math.PI / 2 );
				scene.add( saturnring2 );
				
				saturnring3 = new THREE.Mesh( new THREE.RingGeometry( 80, 90, 30, -5, 5, Math.PI * 2 ), material2 );
				saturnring3.position.set( -900, 0, 0 );
				saturnring3.rotateX( Math.PI / 2 );
				scene.add( saturnring3 );
				
				saturnring4 = new THREE.Mesh( new THREE.RingGeometry( 93, 97, 30, -5, 5, Math.PI * 2 ), material2 );
				saturnring4.position.set( -900, 0, 0 );
				saturnring4.rotateX( Math.PI / 2 );
				scene.add( saturnring4 );
				
				
			//where all the math magic happens
			var render = function () {
			
				//timer used for setting speed of camera rotation around origin
				var timer = Date.now() * 0.0005
				
				//camera path around origin
				camera.position.x = Math.cos( timer ) * 1300;
				camera.position.z = Math.sin( timer ) * 1300;
				camera.lookAt( scene.position );

				//rotation on sphere's y-axis
				//sun.rotation.x += 0.01;
				sun.rotation.y += 0.01;
				
				//rotation on sphere's y-axis
				saturn.rotation.y += 0.005;
				
				saturnring.rotation.z -= 0.05;
				saturnring2.rotation.z -= 0.03;
				saturnring3.rotation.z -= 0.05;
				saturnring4.rotation.z -= 0.04;				
				
				renderer.render(scene, camera);
				
			};

			
			//making the math magic run, and run at 60 frames per second - hopefully
			var animate = function() {
			
				requestAnimationFrame( animate );
				render();
				
				};
			
			
			//self explanatory 
			animate();	
			
		</script>
	</body>
</html>