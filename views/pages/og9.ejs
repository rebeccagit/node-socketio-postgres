<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - materials - shaders [custom]</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #ffffff;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				font-weight: bold;
				background-color: #050505;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}
			a {
				color: #ffffff;
			}
			#oldie a { color:#da0 }
		</style>
	</head>
	<body>

		<div id="container"></div>
		<div id="info"><a href="http://threejs.org" target="_blank">three.js</a> - shader material demo. featuring <a href="http://www.pouet.net/prod.php?which=52761" target="_blank">Monjori by Mic</a></div>

		<script src="myscripts/threejs/three.js"></script>
		<script src="myscripts/threejs/Detector.js"></script>

		<script id="fragment_shader1" type="x-shader/x-fragment">
			uniform vec2 resolution;
			uniform float time;
			varying vec2 vUv;
			void main(void)
			{
				vec2 p = -1.0 + 2.0 * vUv;
				float a = time*40.0;
				float d,e,f,g=1.0/40.0,h,i,r,q;
				e=400.0*(p.x*0.5+0.5);
				f=400.0*(p.y*0.5+0.5);
				i=200.0+sin(e*g+a/150.0)*20.0;
				d=200.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;
				r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));
				q=f/r;
				e=(r*cos(q))-a/2.0;f=(r*sin(q))-a/2.0;
				d=sin(e*g)*176.0+sin(e*g)*164.0+r;
				h=((f+d)+a/2.0)*g;
				i=cos(h+r*p.x/1.3)*(e+e+a)+cos(q*g*6.0)*(r+h/3.0);
				h=sin(f*g)*144.0-sin(e*g)*212.0*p.x;
				h=(h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;
				i+=cos(h*2.3*sin(a/350.0-q))*184.0*sin(q-(r*4.3+a/12.0)*g)+tan(r*g+h)*184.0*cos(r*g+h);
				i=mod(i/5.6,256.0)/64.0;
				if(i<0.0) i+=4.0;
				if(i>=2.0) i=4.0-i;
				d=r/350.0;
				d+=sin(d*d*8.0)*0.52;
				f=(sin(a*g)+1.0)/2.0;
				gl_FragColor=vec4(vec3(f*i/1.6,i/2.0+d/13.0,i)*d*p.x+vec3(i/1.3+d/8.0,i/2.0+d/18.0,i)*d*(1.0-p.x),1.0);
			}
		</script>

		<script id="vertexShader" type="x-shader/x-vertex">
			varying vec2 vUv;
			void main()
			{
				vUv = uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;
			}
		</script>

		<script>
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			var container;
			//var stats;
			var camera, scene, renderer;
			var uniforms1, uniforms2;
			var clock = new THREE.Clock();
			init();
			animate();
			function init() {
				container = document.getElementById( 'container' );
				camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 3000 );
				camera.position.z = 4;
				scene = new THREE.Scene();
				
				var geometry = new THREE.BoxGeometry( 0.75, 0.75, 0.75 );
				
				uniforms1 = {
					time: { type: "f", value: 1.0 },
					resolution: { type: "v2", value: new THREE.Vector2() }
				};
				uniforms2 = {
					time: { type: "f", value: 1.0 },
					resolution: { type: "v2", value: new THREE.Vector2() },
					texture: { type: "t", value: new THREE.TextureLoader().load( "textures/disturb.jpg" ) }
				};
				uniforms2.texture.value.wrapS = uniforms2.texture.value.wrapT = THREE.RepeatWrapping;
				var params = [
					[ 'fragment_shader1', uniforms1 ]
				];
				
				for( var i = 0; i < params.length; i++ ) {
					var material = new THREE.ShaderMaterial( {
						uniforms: params[ i ][ 1 ],
						vertexShader: document.getElementById( 'vertexShader' ).textContent,
						fragmentShader: document.getElementById( params[ i ][ 0 ] ).textContent
						} );
					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.x = i - ( params.length - 1 ) / 2;
					mesh.position.y = i % 2 - 0.5;
					scene.add( mesh );
				}
				
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				container.appendChild( renderer.domElement );
				//stats = new Stats();
				//container.appendChild( stats.dom );
				onWindowResize();
				window.addEventListener( 'resize', onWindowResize, false );
			}

			//
			function animate() {
				requestAnimationFrame( animate );
				render();
				//stats.update();
			}
			function render() {
				var delta = clock.getDelta();
				uniforms1.time.value += delta * 5;
				uniforms2.time.value = clock.elapsedTime;
				for ( var i = 0; i < scene.children.length; i ++ ) {
					var object = scene.children[ i ];
					object.rotation.y += delta * 0.5 * ( i % 2 ? 1 : -1 );
					object.rotation.x += delta * 0.5 * ( i % 2 ? -1 : 1 );
				}
				renderer.render( scene, camera );
			}
		</script>

	</body>
</html>