<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Down the rabbit hole!</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #fff;
				background-color: #000;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<div id="container"></div>
		<div id="info">Lava shader by <a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=21057" target="_blank">TheGameMaker</a></div>

		<script src="myscripts/threejs/three.js"></script>

		<script src="myscripts/shaders/ConvolutionShader.js"></script>
		<script src="myscripts/shaders/CopyShader.js"></script>
		<script src="myscripts/shaders/FilmShader.js"></script>

		<script src="myscripts/postprocessing/EffectComposer.js"></script>
		<script src="myscripts/postprocessing/ShaderPass.js"></script>
		<script src="myscripts/postprocessing/MaskPass.js"></script>
		<script src="myscripts/postprocessing/RenderPass.js"></script>
		<script src="myscripts/postprocessing/BloomPass.js"></script>
		<script src="myscripts/postprocessing/FilmPass.js"></script>

		<script src="myscripts/threejs/Detector.js"></script>
		
		<script id="fragmentShader" type="x-shader/x-fragment">

			uniform float time;
			uniform vec2 resolution;

			uniform float fogDensity;
			uniform vec3 fogColor;

			uniform sampler2D texture1;
			uniform sampler2D texture2;

			varying vec2 vUv;

			void main( void ) {

				vec2 position = -1.0 + 2.0 * vUv;

				vec4 noise = texture2D( texture1, vUv );
				vec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;
				vec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;

				T1.x += noise.x * 2.0;
				T1.y += noise.y * 2.0;
				T2.x -= noise.y * 0.2;
				T2.y += noise.z * 0.2;

				float p = texture2D( texture1, T1 * 2.0 ).a;

				vec4 color = texture2D( texture2, T2 * 2.0 );
				vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );

				if( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }
				if( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }
				if( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }

				gl_FragColor = temp;

				float depth = gl_FragCoord.z / gl_FragCoord.w;
				const float LOG2 = 1.442695;
				float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );
				fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );

				gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );

			}

		</script>

		<script id="vertexShader" type="x-shader/x-vertex">

			uniform vec2 uvScale;
			varying vec2 vUv;

			void main()
			{

				vUv = uvScale * uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;

			}

		</script>

		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container;

			var clock = new THREE.Clock();

			var camera, scene, renderer, composer;

			var uniforms, material, mesh;

			var mouseX = 0, mouseY = 0,
			lat = 0, lon = 0, phy = 0, theta = 0;

			var width = window.innerWidth || 2;
			var height = window.innerHeight || 2;

			var windowHalfX = width / 2;
			var windowHalfY = height / 2;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 35, windowHalfX / windowHalfY, 1, 3000 );
				camera.position.z = 5;

				scene = new THREE.Scene();
				//camera = new THREE.PerspectiveCamera( 50, window.innerWidth/window.innerHeight, 1, 500 );
				//camera.position.y = 200;

				var textureLoader = new THREE.TextureLoader();

				uniforms = {

					fogDensity: { value: 0.45 },
					fogColor:   { value: new THREE.Vector3( 0, 0, 0 ) },
					time:       { value: 1.0 },
					resolution: { value: new THREE.Vector2() },
					uvScale:    { value: new THREE.Vector2( 3.0, 1.0 ) },
					texture1:   { value: textureLoader.load( "images/cloud.png" ) },
					texture2:   { value: textureLoader.load( "images/lavatile.jpg" ) }

				};

				uniforms.texture1.value.wrapS = uniforms.texture1.value.wrapT = THREE.RepeatWrapping;
				uniforms.texture2.value.wrapS = uniforms.texture2.value.wrapT = THREE.RepeatWrapping;

				var size = 0.65;

				material = new THREE.ShaderMaterial( {

					uniforms: uniforms,
					vertexShader: document.getElementById( 'vertexShader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShader' ).textContent

				} );

				mesh = new THREE.Mesh( new THREE.SphereGeometry( 1, 50, 50 ), material );
				mesh.rotation.y = 1.0;
				mesh.position.set( 0, 0, 0 );
				scene.add( mesh );

				//

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				container.appendChild( renderer.domElement );
				renderer.autoClear = false;

				//

				//stats = new Stats();
				//container.appendChild( stats.dom );

				//

				var renderModel = new THREE.RenderPass( scene, camera );
				var effectBloom = new THREE.BloomPass( 1.25 );
				var effectFilm = new THREE.FilmPass( 0.35, 0.95, 2048, false );

				effectFilm.renderToScreen = true;

				composer = new THREE.EffectComposer( renderer );

				composer.addPass( renderModel );
				composer.addPass( effectBloom );
				composer.addPass( effectFilm );

				//

				onWindowResize();

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize( event ) {

				uniforms.resolution.value.x = window.innerWidth;
				uniforms.resolution.value.y = window.innerHeight;

				renderer.setSize( window.innerWidth, window.innerHeight );

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				composer.reset();

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				//stats.update();

			}

			function render() {

				var delta = 5 * clock.getDelta();

				uniforms.time.value += 0.2 * delta;

				mesh.rotation.y += 0.0125 * delta;
				mesh.rotation.x += 0.05 * delta;

				renderer.clear();
				composer.render( 0.01 );

			}

		</script>

	</body>
</html>